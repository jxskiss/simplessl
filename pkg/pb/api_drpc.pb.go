// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.32
// source: api.proto

package pb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_api_proto struct{}

func (drpcEncoding_File_api_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_api_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_api_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_api_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_api_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCCertServerClient interface {
	DRPCConn() drpc.Conn

	GetCertificate(ctx context.Context, in *GetCertificateRequest) (*GetCertificateResponse, error)
	GetOCSPStapling(ctx context.Context, in *GetOCSPStaplingRequest) (*GetOCSPStaplingResponse, error)
}

type drpcCertServerClient struct {
	cc drpc.Conn
}

func NewDRPCCertServerClient(cc drpc.Conn) DRPCCertServerClient {
	return &drpcCertServerClient{cc}
}

func (c *drpcCertServerClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcCertServerClient) GetCertificate(ctx context.Context, in *GetCertificateRequest) (*GetCertificateResponse, error) {
	out := new(GetCertificateResponse)
	err := c.cc.Invoke(ctx, "/sslcertserver.CertServer/GetCertificate", drpcEncoding_File_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcCertServerClient) GetOCSPStapling(ctx context.Context, in *GetOCSPStaplingRequest) (*GetOCSPStaplingResponse, error) {
	out := new(GetOCSPStaplingResponse)
	err := c.cc.Invoke(ctx, "/sslcertserver.CertServer/GetOCSPStapling", drpcEncoding_File_api_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCCertServerServer interface {
	GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error)
	GetOCSPStapling(context.Context, *GetOCSPStaplingRequest) (*GetOCSPStaplingResponse, error)
}

type DRPCCertServerUnimplementedServer struct{}

func (s *DRPCCertServerUnimplementedServer) GetCertificate(context.Context, *GetCertificateRequest) (*GetCertificateResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCCertServerUnimplementedServer) GetOCSPStapling(context.Context, *GetOCSPStaplingRequest) (*GetOCSPStaplingResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCCertServerDescription struct{}

func (DRPCCertServerDescription) NumMethods() int { return 2 }

func (DRPCCertServerDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/sslcertserver.CertServer/GetCertificate", drpcEncoding_File_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCCertServerServer).
					GetCertificate(
						ctx,
						in1.(*GetCertificateRequest),
					)
			}, DRPCCertServerServer.GetCertificate, true
	case 1:
		return "/sslcertserver.CertServer/GetOCSPStapling", drpcEncoding_File_api_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCCertServerServer).
					GetOCSPStapling(
						ctx,
						in1.(*GetOCSPStaplingRequest),
					)
			}, DRPCCertServerServer.GetOCSPStapling, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterCertServer(mux drpc.Mux, impl DRPCCertServerServer) error {
	return mux.Register(impl, DRPCCertServerDescription{})
}

type DRPCCertServer_GetCertificateStream interface {
	drpc.Stream
	SendAndClose(*GetCertificateResponse) error
}

type drpcCertServer_GetCertificateStream struct {
	drpc.Stream
}

func (x *drpcCertServer_GetCertificateStream) SendAndClose(m *GetCertificateResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCCertServer_GetOCSPStaplingStream interface {
	drpc.Stream
	SendAndClose(*GetOCSPStaplingResponse) error
}

type drpcCertServer_GetOCSPStaplingStream struct {
	drpc.Stream
}

func (x *drpcCertServer_GetOCSPStaplingStream) SendAndClose(m *GetOCSPStaplingResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_api_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
